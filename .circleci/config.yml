#!/bin/bash
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: 2.1
workflows:
  version: 2
  build:
    jobs:
#       - jdk_8
      - jdk_11

commands: 
  build_steps:
    description: "Build Steps"
    steps:
        - checkout
        - setup_remote_docker
        - run:
            name: Upgrade Gradle
            command: |
              #sudo add-apt-repository ppa:cwchien/gradle
              #sudo apt-get update
              #sudo apt upgrade gradle
              #export TERM=xterm && gradle wrapper
              #echo "upgrade gradle"
              #./gradlew wrapper --gradle-version=5.5.1 --distribution-type=bin --no-daemon
        - run:
            name: Build Steps
            command: |            
              echo "$JAVA_HOME"
              java -version
              gradle -version
              
              gradle
              
              export GRADLE_OPTS=-Xmx1024m
              GRADLE_OPTS=-Xmx1024m
              ./gradlew --no-daemon --continue -PmaxParallelForks=1 -PtestLoggingEvents=started,passed,skipped,failed -PxmlFindBugsReport=true -PscalaVersion=2.12 clean test
              
        - run:
            name: Steps 2
            command: |

              # Run validation checks (compilation and static analysis)
              # rat
              ./gradlew clean compileJava compileScala compileTestJava compileTestScala \
                  spotlessScalaCheck checkstyleMain checkstyleTest spotbugsMain \
                  --profile --no-daemon --stacktrace --continue -PxmlSpotBugsReport=true "$@" \
                  || { echo 'Validation steps failed'; exit 1; }

              # Run tests
              ./gradlew unitTest integrationTest \
                  --profile --no-daemon --continue -PtestLoggingEvents=started,passed,skipped,failed "$@" \
                  || { echo 'Test steps failed'; exit 1; }

              # Verify that Kafka Streams archetype compiles
              if [ $JAVA_HOME = "/home/jenkins/tools/java/latest11" ] ; then
                echo "Skipping Kafka Streams archetype test for Java 11"
                exit 0
              fi

              ./gradlew streams:install clients:install connect:json:install connect:api:install \
                  || { echo 'Could not install kafka-streams.jar (and dependencies) locally`'; exit 1; }

              version=`grep "^version=" gradle.properties | cut -d= -f 2` \
                  || { echo 'Could not get version from `gradle.properties`'; exit 1; }

              cd streams/quickstart \
                  || { echo 'Could not change into directory `streams/quickstart`'; exit 1; }

              # variable $MAVEN_LATEST__HOME is provided by Jenkins (see build configuration)
              mvn=$MAVEN_LATEST__HOME/bin/mvn

              $mvn clean install -Dgpg.skip  \
                  || { echo 'Could not `mvn install` streams quickstart archetype'; exit 1; }

              mkdir test-streams-archetype && cd test-streams-archetype \
                  || { echo 'Could not create test directory for stream quickstart archetype'; exit 1; }

              echo "Y" | $mvn archetype:generate \
                  -DarchetypeCatalog=local \
                  -DarchetypeGroupId=org.apache.kafka \
                  -DarchetypeArtifactId=streams-quickstart-java \
                  -DarchetypeVersion=$version \
                  -DgroupId=streams.examples \
                  -DartifactId=streams.examples \
                  -Dversion=0.1 \
                  -Dpackage=myapps \
                  || { echo 'Could not create new project using streams quickstart archetype'; exit 1; }

              cd streams.examples \
                  || { echo 'Could not change into directory `streams.examples`'; exit 1; }

              $mvn compile \
                  || { echo 'Could not compile streams quickstart archetype project'; exit 1; }
                  
jobs:
  jdk_8:
    machine:
      image: ubuntu-1604:201903-01
#     docker:   
#       - image: circleci/openjdk:8-jdk
    steps:
      - build_steps
      
  jdk_11:
    docker:   
      - image: circleci/openjdk:11-jdk
    resource_class: large
    steps:
      - build_steps
